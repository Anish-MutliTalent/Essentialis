{
  "version": 3,
  "sources": ["../../thirdweb/src/utils/formatNumber.ts", "../../thirdweb/src/utils/shortenLargeNumber.ts", "../../thirdweb/src/utils/ens/isValidENSName.ts"],
  "sourcesContent": ["/**\n * Round up a number to a certain decimal place\n * @example\n * ```ts\n * import { formatNumber } from \"thirdweb/utils\";\n * const value = formatNumber(12.1214141, 1); // 12.1\n * ```\n * @utils\n */\nexport function formatNumber(value: number, decimalPlaces: number) {\n  if (value === 0) return 0;\n  const precision = 10 ** decimalPlaces;\n  const threshold = 1 / 10 ** decimalPlaces; // anything below this if rounded will result in zero - so use ceil instead\n  const fn: \"ceil\" | \"round\" = value < threshold ? \"ceil\" : \"round\";\n  return Math[fn]((value + Number.EPSILON) * precision) / precision;\n}\n", "/**\n * Shorten the string for large value\n * Mainly used for\n * Examples:\n * 10_000 -> 10k\n * 1_000_000 -> 1M\n * 1_000_000_000 -> 1B\n * @example\n * ```ts\n * import { shortenLargeNumber } from \"thirdweb/utils\";\n * const numStr = shortenLargeNumber(1_000_000_000, )\n * ```\n * @utils\n */\nexport function shortenLargeNumber(value: number) {\n  if (value === 0) {\n    return \"0.00\";\n  }\n  if (value < 1000) {\n    return value.toString();\n  }\n  if (value < 10_000) {\n    return value.toLocaleString(\"en-US\");\n  }\n  if (value < 1_000_000) {\n    return formatLargeNumber(value, 1_000, \"k\");\n  }\n  if (value < 1_000_000_000) {\n    return formatLargeNumber(value, 1_000_000, \"M\");\n  }\n  return formatLargeNumber(value, 1_000_000_000, \"B\");\n}\n\n/**\n * Shorten the string for large value (over 4 digits)\n * 1000 -> 1000\n * 10_000 -> 10k\n * 1_000_000 -> 1M\n * 1_000_000_000 -> 1B\n */\nfunction formatLargeNumber(\n  value: number,\n  divisor: number,\n  suffix: \"k\" | \"M\" | \"B\",\n) {\n  const quotient = value / divisor;\n  if (Number.isInteger(quotient)) {\n    return Math.floor(quotient) + suffix;\n  }\n  return quotient.toFixed(1).replace(/\\.0$/, \"\") + suffix;\n}\n", "// modified version of isFQDN from validator.js that checks if given string is a valid domain name\n// https://github.com/validatorjs/validator.js/blob/master/src/lib/isFQDN.js\n// underscores are allowed, hyphens are allowed, no max length check\n\n/**\n * Checks if a string is a valid ENS name.\n * It does not check if the ENS name is currently registered or resolves to an address - it only validates the string format.\n *\n * @param name - The ENS name to check.\n *\n * @example\n * ```ts\n * isValidENSName(\"thirdweb.eth\"); // true\n * isValidENSName(\"foo.bar.com\"); // true\n * isValidENSName(\"xyz\"); // false\n */\nexport function isValidENSName(name: string) {\n  const parts = name.split(\".\");\n  const tld = parts[parts.length - 1];\n\n  // disallow fqdns without tld\n  if (parts.length < 2 || !tld) {\n    return false;\n  }\n\n  // disallow spaces\n  if (/\\s/.test(tld)) {\n    return false;\n  }\n\n  // reject numeric TLDs\n  if (/^\\d+$/.test(tld)) {\n    return false;\n  }\n\n  return parts.every((part) => {\n    // part must be at least 1 char long\n    if (part.length < 1) {\n      return false;\n    }\n\n    // disallow invalid chars\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n\n    // disallow full-width chars\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    }\n\n    return true;\n  });\n}\n"],
  "mappings": ";AASM,SAAU,aAAa,OAAe,eAAqB;AAC/D,MAAI,UAAU;AAAG,WAAO;AACxB,QAAM,YAAY,MAAM;AACxB,QAAM,YAAY,IAAI,MAAM;AAC5B,QAAM,KAAuB,QAAQ,YAAY,SAAS;AAC1D,SAAO,KAAK,EAAE,GAAG,QAAQ,OAAO,WAAW,SAAS,IAAI;AAC1D;;;ACDM,SAAU,mBAAmB,OAAa;AAC9C,MAAI,UAAU,GAAG;AACf,WAAO;EACT;AACA,MAAI,QAAQ,KAAM;AAChB,WAAO,MAAM,SAAQ;EACvB;AACA,MAAI,QAAQ,KAAQ;AAClB,WAAO,MAAM,eAAe,OAAO;EACrC;AACA,MAAI,QAAQ,KAAW;AACrB,WAAO,kBAAkB,OAAO,KAAO,GAAG;EAC5C;AACA,MAAI,QAAQ,KAAe;AACzB,WAAO,kBAAkB,OAAO,KAAW,GAAG;EAChD;AACA,SAAO,kBAAkB,OAAO,KAAe,GAAG;AACpD;AASA,SAAS,kBACP,OACA,SACA,QAAuB;AAEvB,QAAM,WAAW,QAAQ;AACzB,MAAI,OAAO,UAAU,QAAQ,GAAG;AAC9B,WAAO,KAAK,MAAM,QAAQ,IAAI;EAChC;AACA,SAAO,SAAS,QAAQ,CAAC,EAAE,QAAQ,QAAQ,EAAE,IAAI;AACnD;;;AClCM,SAAU,eAAe,MAAY;AACzC,QAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,QAAM,MAAM,MAAM,MAAM,SAAS,CAAC;AAGlC,MAAI,MAAM,SAAS,KAAK,CAAC,KAAK;AAC5B,WAAO;EACT;AAGA,MAAI,KAAK,KAAK,GAAG,GAAG;AAClB,WAAO;EACT;AAGA,MAAI,QAAQ,KAAK,GAAG,GAAG;AACrB,WAAO;EACT;AAEA,SAAO,MAAM,MAAM,CAAC,SAAQ;AAE1B,QAAI,KAAK,SAAS,GAAG;AACnB,aAAO;IACT;AAGA,QAAI,CAAC,8BAA8B,KAAK,IAAI,GAAG;AAC7C,aAAO;IACT;AAGA,QAAI,kBAAkB,KAAK,IAAI,GAAG;AAChC,aAAO;IACT;AAEA,WAAO;EACT,CAAC;AACH;",
  "names": []
}
