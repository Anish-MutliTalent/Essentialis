// node_modules/thirdweb/dist/esm/utils/formatNumber.js
function formatNumber(value, decimalPlaces) {
  if (value === 0)
    return 0;
  const precision = 10 ** decimalPlaces;
  const threshold = 1 / 10 ** decimalPlaces;
  const fn = value < threshold ? "ceil" : "round";
  return Math[fn]((value + Number.EPSILON) * precision) / precision;
}

// node_modules/thirdweb/dist/esm/utils/shortenLargeNumber.js
function shortenLargeNumber(value) {
  if (value === 0) {
    return "0.00";
  }
  if (value < 1e3) {
    return value.toString();
  }
  if (value < 1e4) {
    return value.toLocaleString("en-US");
  }
  if (value < 1e6) {
    return formatLargeNumber(value, 1e3, "k");
  }
  if (value < 1e9) {
    return formatLargeNumber(value, 1e6, "M");
  }
  return formatLargeNumber(value, 1e9, "B");
}
function formatLargeNumber(value, divisor, suffix) {
  const quotient = value / divisor;
  if (Number.isInteger(quotient)) {
    return Math.floor(quotient) + suffix;
  }
  return quotient.toFixed(1).replace(/\.0$/, "") + suffix;
}

// node_modules/thirdweb/dist/esm/utils/ens/isValidENSName.js
function isValidENSName(name) {
  const parts = name.split(".");
  const tld = parts[parts.length - 1];
  if (parts.length < 2 || !tld) {
    return false;
  }
  if (/\s/.test(tld)) {
    return false;
  }
  if (/^\d+$/.test(tld)) {
    return false;
  }
  return parts.every((part) => {
    if (part.length < 1) {
      return false;
    }
    if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
      return false;
    }
    if (/[\uff01-\uff5e]/.test(part)) {
      return false;
    }
    return true;
  });
}

export {
  formatNumber,
  shortenLargeNumber,
  isValidENSName
};
//# sourceMappingURL=chunk-VFOFSQSA.js.map
